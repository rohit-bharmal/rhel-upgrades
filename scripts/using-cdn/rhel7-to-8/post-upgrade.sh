#!/bin/bash

#==============================================================================
# Red Hat Enterprise Linux Upgrade Script  
# Post-Upgrade Cleanup - Phase 3 of 3
# Generated by: RHEL Upgrade Helper
# Source Version: RHEL 7
# Target Version: RHEL 8
# Repository Type: Red Hat Content Delivery Network with RHSM
#==============================================================================

# This script performs PHASE 3: Post-upgrade cleanup and verification
# Run this script AFTER:
# 1. System has been upgraded to RHEL 8
# 2. System has rebooted successfully
# 3. You have verified basic system functionality

# IMPORTANT SAFETY WARNINGS:
# 1. DO NOT RUN THIS SCRIPT ON PRODUCTION SYSTEMS WITHOUT TESTING FIRST
# 2. ENSURE YOU HAVE A COMPLETE BACKUP OR VM SNAPSHOT BEFORE PROCEEDING
# 3. REVIEW EACH COMMAND BEFORE EXECUTION
# 4. THIS SCRIPT REQUIRES ROOT PRIVILEGES
# 5. SOME STEPS REQUIRE MANUAL INTERVENTION AND CANNOT BE AUTOMATED

# Exit on any error
set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Simple logging functions
step_echo() {
    echo -e "\n${CYAN}================================================================================${NC}"
    echo -e "${BOLD}${BLUE}STEP $1: $2${NC}"
    echo -e "${CYAN}================================================================================${NC}"
}

info_echo() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn_echo() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error_echo() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success_echo() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error_echo "This script must be run as root. Use: sudo $0"
fi

# Initial safety check
echo -e "${RED}⚠️  CRITICAL WARNING ⚠️${NC}"
echo "This script will clean up after RHEL 7 to RHEL 8 upgrade."
echo "Ensure you have:"
echo "  • Complete system backup or VM snapshot"
echo "  • Tested this procedure in a non-production environment"
echo "  • Read and understood all upgrade documentation"
echo "  • Successfully upgraded to RHEL 8 and rebooted"
echo ""
read -p "Do you want to continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Upgrade cancelled by user."
    exit 0
fi

echo -e "\n${GREEN}Starting Post-Upgrade Cleanup...${NC}\n"


# Step 1
step_echo 1 "[object Object]"
    # If your system is registered by using an account with SCA disabled, verify that the Red Hat Linux Server subscription is attached, the product name is Server, and the status is Subscribed.
    info_echo "Executing: subscription-manager list --installed"
    subscription-manager list --installed || { error_echo "Command failed: subscription-manager list --installed"; exit 1; }



# Step 2
step_echo 2 "Set the Red Hat Subscription Manager to consume the latest RHEL 7 content:"
    # Set the Red Hat Subscription Manager to consume the latest RHEL 7 content:
    info_echo "Executing: subscription-manager release --unset"
    subscription-manager release --unset || { error_echo "Command failed: subscription-manager release --unset"; exit 1; }



#==============================================================================
# VERIFYING THE POST-UPGRADE STATE OF THE RHEL 8 SYSTEM
#==============================================================================
echo -e "\n${CYAN}Starting: Verifying the post-upgrade state of the RHEL 8 system${NC}\n"

# Step 3
step_echo 3 "Check the OS kernel version:"
    # Check the OS kernel version:
    info_echo "Executing: uname -r"
    uname -r || { error_echo "Command failed: uname -r"; exit 1; }

    info_echo "Executing: 4.18.0-<release-version>.el<target_os_version>.x86_64"
    4.18.0-<release-version>.el<target_os_version>.x86_64 || { error_echo "Command failed: 4.18.0-<release-version>.el<target_os_version>.x86_64"; exit 1; }



# Step 4
step_echo 4 "Verify that the correct product is installed:"
    # Verify that the correct product is installed:
    info_echo "Executing: subscription-manager list --installed"
    subscription-manager list --installed || { error_echo "Command failed: subscription-manager list --installed"; exit 1; }



# Step 5
step_echo 5 "Verify that the release version is set to the target OS version immediately after the upgrade:"
    # Verify that the release version is set to the target OS version immediately after the upgrade:
    info_echo "Executing: subscription-manager release"
    subscription-manager release || { error_echo "Command failed: subscription-manager release"; exit 1; }



#==============================================================================
# AFTER PERFORMING THE UPGRADE, COMPLETE THE FOLLOWING TASKS:
#==============================================================================
echo -e "\n${CYAN}Starting: After performing the upgrade, complete the following tasks:${NC}\n"

# Step 6
step_echo 6 "[object Object]"
    # To manually remove packages from the exclude list, edit the  /etc/dnf/dnf.conf  configuration file and remove the desired  Leapp  packages from the  exclude  list.
    info_echo "Executing: dnf -y config-manager --save --setopt exclude=''"
    dnf -y config-manager --save --setopt exclude='' || { error_echo "Command failed: dnf -y config-manager --save --setopt exclude=''"; exit 1; }



# Step 7
step_echo 7 "Locate remaining RHEL 7 packages:"
    # Locate remaining RHEL 7 packages:
    info_echo "Executing: rpm -qa | grep -e '\.el[67]' | grep -vE '^(gpg-pubkey|libmodulemd|katello-ca-consumer)' | sort"
    rpm -qa | grep -e '\.el[67]' | grep -vE '^(gpg-pubkey|libmodulemd|katello-ca-consumer)' | sort || { error_echo "Command failed: rpm -qa | grep -e '\.el[67]' | grep -vE '^(gpg-pubkey|libmodulemd|katello-ca-consumer)' | sort"; exit 1; }



# Step 8
step_echo 8 "Remove remaining Leapp dependency packages:"
    # Remove remaining Leapp dependency packages:
    info_echo "Executing: dnf -y remove leapp-deps-el8 leapp-repository-deps-el8"
    dnf -y remove leapp-deps-el8 leapp-repository-deps-el8 || { error_echo "Command failed: dnf -y remove leapp-deps-el8 leapp-repository-deps-el8"; exit 1; }



# Step 9
step_echo 9 "Optional: Remove all remaining upgrade-related data from the system:"
    # Optional: Remove all remaining upgrade-related data from the system:
    warn_echo "IMPORTANT: Removing this data might limit Red Hat Support's ability to investigate and troubleshoot post-upgrade problems."
    info_echo "Executing: rm -rf /var/log/leapp /root/tmp_leapp_py3 /var/lib/leapp"
    rm -rf /var/log/leapp /root/tmp_leapp_py3 /var/lib/leapp || { error_echo "Command failed: rm -rf /var/log/leapp /root/tmp_leapp_py3 /var/lib/leapp"; exit 1; }



# Step 10
step_echo 10 "Remove the existing rescue kernel and initial RAM disk:"
    # Remove the existing rescue kernel and initial RAM disk:
    # Check if files exist before removing
    if ls /boot/vmlinuz-*rescue* /boot/initramfs-*rescue* 1> /dev/null 2>&1; then
      info_echo "Executing: rm /boot/vmlinuz-*rescue* /boot/initramfs-*rescue*"
      rm /boot/vmlinuz-*rescue* /boot/initramfs-*rescue* || { error_echo "Command failed: rm /boot/vmlinuz-*rescue* /boot/initramfs-*rescue*"; exit 1; }
    else
      info_echo "No files matching /boot/vmlinuz-*rescue* /boot/initramfs-*rescue* found, skipping removal"
    fi



# Step 11
step_echo 11 "Reinstall the rescue kernel and related initial RAM disk:"
    # Reinstall the rescue kernel and related initial RAM disk:
    info_echo "Executing: /usr/lib/kernel/install.d/51-dracut-rescue.install add "$(uname -r)" /boot "/boot/vmlinuz-$(uname -r)""
    /usr/lib/kernel/install.d/51-dracut-rescue.install add "$(uname -r)" /boot "/boot/vmlinuz-$(uname -r)" || { error_echo "Command failed: /usr/lib/kernel/install.d/51-dracut-rescue.install add "$(uname -r)" /boot "/boot/vmlinuz-$(uname -r)""; exit 1; }



# Step 12
step_echo 12 "Verify that the old kernels have been removed from the bootloader entry:"
    # Verify that the old kernels have been removed from the bootloader entry:
    # Check if grubby is installed
    if ! rpm -q grubby >/dev/null 2>&1; then
      info_echo "Installing required package: grubby"
      dnf install -y grubby || { error_echo "Failed to install grubby"; exit 1; }
    else
      info_echo "Package grubby is already installed"
    fi
    info_echo "Executing: grubby --info=ALL | grep "\.el7" || echo "Old kernels are not present in the bootloader.""
    grubby --info=ALL | grep "\.el7" || echo "Old kernels are not present in the bootloader." || { error_echo "Command failed: grubby --info=ALL | grep "\.el7" || echo "Old kernels are not present in the bootloader.""; exit 1; }



# Step 13
step_echo 13 "Verify that the previously removed rescue kernel and rescue initial RAM disk files have been created for the current kernel:"
    # Verify that the previously removed rescue kernel and rescue initial RAM disk files have been created for the current kernel:
    info_echo "Executing: ls /boot/vmlinuz-*rescue* /boot/initramfs-*rescue*"
    ls /boot/vmlinuz-*rescue* /boot/initramfs-*rescue* || { error_echo "Command failed: ls /boot/vmlinuz-*rescue* /boot/initramfs-*rescue*"; exit 1; }

    info_echo "Executing: lsinitrd /boot/initramfs-*rescue*.img | grep -qm1 "$(uname -r)/kernel/" && echo "OK" || echo "FAIL""
    lsinitrd /boot/initramfs-*rescue*.img | grep -qm1 "$(uname -r)/kernel/" && echo "OK" || echo "FAIL" || { error_echo "Command failed: lsinitrd /boot/initramfs-*rescue*.img | grep -qm1 "$(uname -r)/kernel/" && echo "OK" || echo "FAIL""; exit 1; }



# Step 14
step_echo 14 "Verify the rescue boot entry refers to the existing rescue files. See the grubby output:"
    # Verify the rescue boot entry refers to the existing rescue files. See the grubby output:
    # Check if grubby is installed
    if ! rpm -q grubby >/dev/null 2>&1; then
      info_echo "Installing required package: grubby"
      dnf install -y grubby || { error_echo "Failed to install grubby"; exit 1; }
    else
      info_echo "Package grubby is already installed"
    fi
    info_echo "Executing: grubby --info $(ls /boot/vmlinuz-*rescue*)"
    grubby --info $(ls /boot/vmlinuz-*rescue*) || { error_echo "Command failed: grubby --info $(ls /boot/vmlinuz-*rescue*)"; exit 1; }



#==============================================================================
# CHANGING SELINUX MODE TO ENFORCING
#==============================================================================
echo -e "\n${CYAN}Starting: Changing SELinux mode to enforcing${NC}\n"

# Step 15
step_echo 15 "[object Object]"
    # Ensure that there are no SELinux denials, for example, by using the  ausearch  utility:
    # Check if audit is installed
    if ! rpm -q audit >/dev/null 2>&1; then
      info_echo "Installing required package: audit"
      dnf install -y audit || { error_echo "Failed to install audit"; exit 1; }
    else
      info_echo "Package audit is already installed"
    fi
    info_echo "Executing: ausearch -m AVC,USER_AVC -ts boot"
    ausearch -m AVC,USER_AVC -ts boot || { error_echo "Command failed: ausearch -m AVC,USER_AVC -ts boot"; exit 1; }



# Step 16
step_echo 16 "[object Object]"
    # Changing SELinux mode to enforcing in   /etc/selinux/config
    info_echo "Executing: vi /etc/selinux/config"
    vi /etc/selinux/config || { error_echo "Command failed: vi /etc/selinux/config"; exit 1; }



# Step 17
step_echo 17 "Verify SELinux mode"
    # Verify SELinux mode
    info_echo "Executing: $ getenforce"
    $ getenforce || { error_echo "Command failed: $ getenforce"; exit 1; }

    info_echo "Executing: Enforcing"
    Enforcing || { error_echo "Command failed: Enforcing"; exit 1; }



#==============================================================================
# POST-UPGRADE CLEANUP COMPLETED
#==============================================================================

success_echo "Post-upgrade cleanup completed successfully!"
echo ""
echo -e "${BOLD}${GREEN}🎉 UPGRADE PROCESS COMPLETE! 🎉${NC}"
echo ""
echo -e "${BOLD}${YELLOW}FINAL VERIFICATION STEPS:${NC}"
echo -e "${CYAN}1.${NC} ${BOLD}Verify system functionality${NC} - Check that services are running"
echo -e "${CYAN}2.${NC} ${BOLD}Check application compatibility${NC} - Test your applications"
echo -e "${CYAN}3.${NC} ${BOLD}Update security policies${NC} if needed"
echo -e "${CYAN}4.${NC} ${BOLD}Test critical services${NC} - Ensure everything works as expected"
echo ""
echo -e "${GREEN}${BOLD}✅ Congratulations!${NC} Your RHEL upgrade is now complete."
echo ""
