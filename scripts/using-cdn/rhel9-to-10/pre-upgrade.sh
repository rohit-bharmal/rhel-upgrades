#!/bin/bash

#==============================================================================
# Red Hat Enterprise Linux Upgrade Script  
# Pre-Upgrade Preparation - Phase 1 of 3
# Generated by: RHEL Upgrade Helper
# Source Version: RHEL 9
# Target Version: RHEL 10
# Repository Type: Red Hat Content Delivery Network with RHSM
#==============================================================================

# This script performs PHASE 1: System preparation for upgrade
# After this script completes successfully:
# 1. Run 'leapp preupgrade' to analyze your system
# 2. Review and resolve any issues found
# 3. Run 'leapp upgrade' to perform the actual upgrade  
# 4. System will reboot automatically after upgrade
# 5. Run the POST-UPGRADE script after reboot to complete cleanup

# IMPORTANT SAFETY WARNINGS:
# 1. DO NOT RUN THIS SCRIPT ON PRODUCTION SYSTEMS WITHOUT TESTING FIRST
# 2. ENSURE YOU HAVE A COMPLETE BACKUP OR VM SNAPSHOT BEFORE PROCEEDING
# 3. REVIEW EACH COMMAND BEFORE EXECUTION
# 4. THIS SCRIPT REQUIRES ROOT PRIVILEGES
# 5. SOME STEPS REQUIRE MANUAL INTERVENTION AND CANNOT BE AUTOMATED

# Exit on any error
set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Simple logging functions
step_echo() {
    echo -e "\n${CYAN}================================================================================${NC}"
    echo -e "${BOLD}${BLUE}STEP $1: $2${NC}"
    echo -e "${CYAN}================================================================================${NC}"
}

info_echo() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn_echo() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

error_echo() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success_echo() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if running as root
if [[ $EUID -ne 0 ]]; then
    error_echo "This script must be run as root. Use: sudo $0"
fi

# Initial safety check
echo -e "${RED}⚠️  CRITICAL WARNING ⚠️${NC}"
echo "This script will prepare your system for RHEL 9 to RHEL 10 upgrade."
echo "Ensure you have:"
echo "  • Complete system backup or VM snapshot"
echo "  • Tested this procedure in a non-production environment"
echo "  • Read and understood all upgrade documentation"

echo ""
read -p "Do you want to continue? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Upgrade cancelled by user."
    exit 0
fi

echo -e "\n${GREEN}Starting Pre-Upgrade Preparation...${NC}\n"


#==============================================================================
# PREPARING A RHEL 9 SYSTEM FOR THE UPGRADE
#==============================================================================
echo -e "\n${CYAN}Starting: Preparing a RHEL 9 system for the upgrade${NC}\n"

# Step 1
step_echo 1 "If your system is registered by using an account with Simple Content Access (SCA) enabled, verify that the “Content Access Mode is set to Simple Content Access” message appears:"
    # If your system is registered by using an account with Simple Content Access (SCA) enabled, verify that the “Content Access Mode is set to Simple Content Access” message appears:
    info_echo "Executing: subscription-manager status"
    subscription-manager status || { error_echo "Command failed: subscription-manager status"; exit 1; }



# Step 2
step_echo 2 "[object Object]"
    # If your system is registered by using an account with SCA disabled, verify that the Red Hat Linux Server subscription is attached, the product name is Server, and the status is Subscribed.
    info_echo "Executing: subscription-manager list --installed"
    subscription-manager list --installed || { error_echo "Command failed: subscription-manager list --installed"; exit 1; }



# Step 3
step_echo 3 "Ensure you have appropriate repositories enabled."
    # Ensure you have appropriate repositories enabled.
    # Check if repository rhel-9-for-x86_64-baseos-rpms is already enabled
    if ! subscription-manager repos --list-enabled | grep -q "rhel-9-for-x86_64-baseos-rpms" 2>/dev/null; then
      info_echo "Enabling repository: rhel-9-for-x86_64-baseos-rpms"
      subscription-manager repos --enable rhel-9-for-x86_64-baseos-rpms || { error_echo "Command failed: subscription-manager repos --enable rhel-9-for-x86_64-baseos-rpms"; exit 1; }
    else
      info_echo "Repository rhel-9-for-x86_64-baseos-rpms is already enabled, skipping"
    fi

    # Check if repository rhel-9-for-x86_64-appstream-rpms is already enabled
    if ! subscription-manager repos --list-enabled | grep -q "rhel-9-for-x86_64-appstream-rpms" 2>/dev/null; then
      info_echo "Enabling repository: rhel-9-for-x86_64-appstream-rpms"
      subscription-manager repos --enable rhel-9-for-x86_64-appstream-rpms || { error_echo "Command failed: subscription-manager repos --enable rhel-9-for-x86_64-appstream-rpms"; exit 1; }
    else
      info_echo "Repository rhel-9-for-x86_64-appstream-rpms is already enabled, skipping"
    fi



# Step 4
step_echo 4 "For systems subscribed using RHSM, lock the system to the desired source OS version:"
    # For systems subscribed using RHSM, lock the system to the desired source OS version:
    info_echo "Executing: # Auto-detect current RHEL version and set release
CURRENT_VERSION=$(cat /etc/redhat-release | grep -oE '[0-9]+.[0-9]+' | head -1)
if [ -z "$CURRENT_VERSION" ]; then
    error_echo "Could not detect current RHEL version"
    exit 1
fi
info_echo "Detected RHEL version: $CURRENT_VERSION"
subscription-manager release --set $CURRENT_VERSION"
    # Auto-detect current RHEL version and set release
CURRENT_VERSION=$(cat /etc/redhat-release | grep -oE '[0-9]+.[0-9]+' | head -1)
if [ -z "$CURRENT_VERSION" ]; then
    error_echo "Could not detect current RHEL version"
    exit 1
fi
info_echo "Detected RHEL version: $CURRENT_VERSION"
subscription-manager release --set $CURRENT_VERSION || { error_echo "Command failed: # Auto-detect current RHEL version and set release
CURRENT_VERSION=$(cat /etc/redhat-release | grep -oE '[0-9]+.[0-9]+' | head -1)
if [ -z "$CURRENT_VERSION" ]; then
    error_echo "Could not detect current RHEL version"
    exit 1
fi
info_echo "Detected RHEL version: $CURRENT_VERSION"
subscription-manager release --set $CURRENT_VERSION"; exit 1; }



# Step 5
step_echo 5 "If you use the dnf versionlock plug-in to lock packages to a specific version, clear the lock by running:"
    # If you use the dnf versionlock plug-in to lock packages to a specific version, clear the lock by running:
    # Check if dnf-plugin-versionlock is installed
    if ! rpm -q dnf-plugin-versionlock >/dev/null 2>&1; then
      info_echo "Installing required package: dnf-plugin-versionlock"
      dnf install -y dnf-plugin-versionlock || { error_echo "Failed to install dnf-plugin-versionlock"; exit 1; }
    else
      info_echo "Package dnf-plugin-versionlock is already installed"
    fi
    info_echo "Executing: dnf -y versionlock clear"
    dnf -y versionlock clear || { error_echo "Command failed: dnf -y versionlock clear"; exit 1; }



# Step 6
step_echo 6 "Install the Leapp utility:"
    # Install the Leapp utility:
    info_echo "Executing: dnf -y install leapp-upgrade"
    dnf -y install leapp-upgrade || { error_echo "Command failed: dnf -y install leapp-upgrade"; exit 1; }



# Step 7
step_echo 7 "Update all packages to the latest RHEL 9 version:"
    # Update all packages to the latest RHEL 9 version:
    info_echo "Executing: dnf -y update"
    dnf -y update || { error_echo "Command failed: dnf -y update"; exit 1; }



# Step 8
step_echo 8 "For reviewing through the web console, install cockpit-leapp package:"
    # For reviewing through the web console, install cockpit-leapp package:
    info_echo "Executing: dnf -y install cockpit-leapp"
    dnf -y install cockpit-leapp || { error_echo "Command failed: dnf -y install cockpit-leapp"; exit 1; }



# Step 9
step_echo 9 "Verify that the correct product is installed:"
    # Verify that the correct product is installed:
    info_echo "Executing: subscription-manager list --installed"
    subscription-manager list --installed || { error_echo "Command failed: subscription-manager list --installed"; exit 1; }



#==============================================================================
# PRE-UPGRADE PREPARATION COMPLETED
#==============================================================================

success_echo "Pre-upgrade preparation completed successfully!"
echo ""
echo -e "${BOLD}${YELLOW}NEXT STEPS - MANUAL UPGRADE PROCESS:${NC}"
echo -e "${CYAN}1.${NC} ${BOLD}Reboot the system${NC} to ensure all updates are applied"
echo -e "${CYAN}2.${NC} After reboot, run: ${GREEN}${BOLD}leapp preupgrade${NC}"
echo -e "${CYAN}3.${NC} Review the pre-upgrade report carefully"
echo -e "${CYAN}4.${NC} Resolve any issues found by leapp"
echo -e "${CYAN}5.${NC} Run: ${GREEN}${BOLD}leapp upgrade${NC}"
echo -e "${CYAN}6.${NC} System will reboot automatically during upgrade"
echo -e "${CYAN}7.${NC} After upgrade reboot, verify the system is running the new RHEL version"
echo -e "${CYAN}8.${NC} Run the ${BLUE}${BOLD}POST-UPGRADE script${NC} for cleanup and verification"
echo ""
echo -e "${RED}${BOLD}⚠️  IMPORTANT:${NC} ${YELLOW}Reboot the system first${NC}, then run leapp commands."
echo -e "${YELLOW}The leapp upgrade process will also reboot the system automatically.${NC}"
echo ""
